// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id               String        @id @default(uuid())
  name             String
  email            String        @unique
  birthday         DateTime
  password         String
  subscription     subscription?
  watchLater       watchLater[]
  favoritos        favorito[]
  donator          Boolean       @default(false)
  avatar           String?
  verified         Boolean       @default(false)
  news             Boolean       @default(true)
  access           Boolean       @default(false)
  resetToken       String?
  resetTokenExpire DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model subscription {
  id     String @id @default(uuid())
  userId String @unique
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  subId  Int
  status String

  planId String
  plan   plan   @relation(fields: [planId], references: [id])
  //antes de continuar, quero ver o que retorna na busca pela subscrição, pra decidir quais campos guardar aqui
  //posso guardar informações de pagamento pra mostrar na página do usuário, data de vencimento, status da assinatura, quais já foram pagas, etc....
  //preciso abranger todos os cenários: pagamento por boleto, por cartão de crédito, solicitação de cancelamento de sub, mudança de plano, etc...
}

model plan {
  id     String @id @default(uuid())
  name   String @unique
  price  Int
  type   String //mensal, anual, trimestral, semestral
  planId Int    @unique //id do plano na EFI

  sub subscription[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model watchLater {
  id       String @id @default(uuid())
  title    String
  subtitle String
  tmdbid   Int

  userId String
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model movies {
  id          String   @id @default(uuid())
  title       String
  subtitle    String?
  src         String
  background  String
  overlay     String
  description String
  duration    String
  genero      String[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model favorito {
  id       String  @id @default(uuid())
  tmdbid   Int
  title    String
  subtitle String?
  userId   String
  user     user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}

model problem {
  id          String @id @default(uuid())
  title       String
  description String
  tmdbId      Int    @unique
  season      Int?
  episode     Int?
  userId      String
  status      String

  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}
